@model OJS.Web.Areas.Administration.ViewModels.Contest.ChangeTimeForParticipantsViewModel

@using OJS.Web.Areas.Administration.Controllers

@using Resource = Resources.Areas.Administration.Contests.Views.ChangeTime
@using SharedResource = Resources.Areas.Contests.ContestsGeneral;

@{
    ViewBag.Title = Resource.Page_title;
}

@section Styles {
    <link href="/Content/Contests/change-time.css" rel="stylesheet" />
}

<div id="change-time-container">
    <h1>@ViewBag.Title</h1>
    <h2>@Resource.Contest : <strong class="text-success">@Model.ContestName</strong></h2>
    <h3>@Resource.Change_time_legend</h3>
    <div id="change-time-for-active-participants" class="container">
        @using (Html.BeginForm<ContestsController>(c => c.ChangeActiveParticipantsEndTime(null), FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.ContesId)
            @Html.HiddenFor(m => m.ContestName)

            <div class="top-buffer">
                <div class="row">
                    <div class="col-xs-12 bottom-buffer">
                        <div class="center-block">
                            <span class="right-buffer glyphicon glyphicon-time"></span>
                            @Html.LabelFor(m => m.TimeInMinutes)
                        </div>
                    </div>
                    <div class="editor-field col-xs-3 text-center">
                        <div class="number-input">
                            @Html.EditorFor(m => m.TimeInMinutes, new { @class = "pull-left" })
                        </div>
                    </div>
                    <div class="editor-field col-xs-4">
                        @Html.ValidationMessageFor(m => m.TimeInMinutes)
                    </div>
                </div>
            </div>

            <div class="row top-buffer-lg ">
                @Html.CheckBoxFor(m => m.ChangeByTimeInterval, new { @class = "change-time-method-checkbox top-buffer-lg" })
                @Html.LabelFor(m => m.ChangeByTimeInterval)
                
                <div class="change-time-method-container" id="change-time-by-interval">
                    <div class="row">
                        <div class="col-xs-12 bottom-buffer">
                            <div>
                                <h5><strong>@Resource.Participants_created_in_time_interval_information:</strong></h5>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-12">
                            <div class="center-block">
                                @Html.LabelFor(m => m.ParticipantsCreatedAfterDateTime)
                            </div>
                        </div>
                        <div class="editor-field col-xs-10">
                            @Html.EditorFor(m => m.ParticipantsCreatedAfterDateTime)
                            <p>@Html.Raw(Resource.Default_participants_created_after_value_explanation)</p>
                        </div>
                        <div class="editor-field col-xs-4">
                            @Html.ValidationMessageFor(m => m.ParticipantsCreatedAfterDateTime)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="center-block">
                                @Html.LabelFor(m => m.ParticipantsCreatedBeforeDateTime)
                            </div>
                        </div>
                        <div class="editor-field col-xs-10">
                            @Html.EditorFor(m => m.ParticipantsCreatedBeforeDateTime)
                            <p>@Html.Raw(Resource.Default_participants_created_before_value_explanation)</p>
                        </div>
                        <div class="editor-field col-xs-4">
                            @Html.ValidationMessageFor(m => m.ParticipantsCreatedBeforeDateTime)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row top-buffer">
                @Html.CheckBoxFor(m => m.ChangeByUser, new { @class="change-time-method-checkbox" })
                @Html.LabelFor(m => m.ChangeByUser)
                
                <div class="row change-time-method-container" id="change-time-by-user" hidden>
                    <div class="editor-field col-xs-10">
                        @Html.EditorFor(m => m.UserId)
                    </div>
                    <div class="editor-field col-xs-4">
                        @Html.ValidationMessageFor(m => m.UserId)
                    </div>
                </div>
            </div>

            <div class="row top-buffer">
                <div class="editor-label col-xs-2">
                    <span id="add-time-for-participants-btn" class="btn btn-success pull-left top-buffer">@Resource.Add_time</span>
                    <span id="subtract-time-for-participants-btn" class="btn btn-danger pull-left top-buffer hidden">@Resource.Subtract_time</span>
                </div>
                <div class="editor-label col-sm-2">
                    @(Html.ActionLink<OJS.Web.Areas.Contests.Controllers.ContestsController>(
                        SharedResource.Cancel, c => c.Details(Model.ContesId), null, new { @class = "btn btn-primary top-buffer" }))
                </div>
            </div>
        }
    </div>
</div>
<div id="confirm-window-pop-up-container" style="display: none">
    <div id="confirm-window-pop-up" class="row">
        <h3 id="confirm-window-header"></h3>
        <label name="Name">@Resource.Enter_your_username</label>
        <input id="username-confirmation-input" class="form-control" type="text"/>
        <div class="container-fluid row">
            <input id="submit-form-button" type="submit" class="btn btn-success pull-left top-buffer col-xs-3" disabled="disabled"value="@SharedResource.Yes"/>
            <span id="cancel-btn-confirm-pop-up" class="btn btn-primary pull-right top-buffer col-xs-6">@SharedResource.Cancel</span>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        ($(function () {
            if ("@Model.ChangeByUser.ToString().ToLower()" === "true") {
                $('#change-time-by-user').show();
                $('#change-time-by-interval').hide();
            } else if ("@Model.ChangeByTimeInterval.ToString().ToLower()" === "true") {
                $('#change-time-by-interval').show();
            }

            var timeInput = $('#TimeInMinutes');
            changeAddSubractButton(timeInput.val());

            timeInput.on('input',
                function () {
                    changeAddSubractButton(timeInput.val());
                });

            var addButtonSelector = '#add-time-for-participants-btn';
            var subtractButtonSelector = '#subtract-time-for-participants-btn';

            var buttons = [addButtonSelector, subtractButtonSelector];

            $(buttons.join()).click(
                function () {
                    setConfirmWindowHeader();

                    var changeTimeContainer = $('#change-time-container');
                    var confirmWindow = $('#confirm-window-pop-up-container');
                    var confirmPopUp = confirmWindow.find('#confirm-window-pop-up');

                    var inputValue = timeInput.val();
                    var createdBeforeValue = $('#ParticipantsCreatedBeforeDateTime').val();
                    var createdAfterValue = $('#ParticipantsCreatedAfterDateTime').val();
                    var participantUsername = $('#UserId').data('kendoComboBox').text();

                    var submitFormButton = $('#submit-form-button');
                    var action = $('#action');
                    var minutes = $('#minutes');
                    var preposition = $('#preposition');
                    var createdBefore = $('#createdBefore');
                    var createdAfter = $('#createdAfter');
                    var usernamePlaceholder = $('#username-placeholder');
                    var headerStrongElements = confirmPopUp.find('h3 strong');

                    if (inputValue >= 0) {
                        action.text('@Resource.Add_are_you_sure');
                        headerStrongElements.css('color', "#13987E");
                        preposition.text('@Resource.To');
                    } else {
                        action.text('@Resource.Subtract_are_you_sure');
                        headerStrongElements.css('color', "#DF2E1B");
                        preposition.text('@Resource.From');
                    }

                    createdBefore.text(createdBeforeValue);
                    createdAfter.text(createdAfterValue);
                    usernamePlaceholder.text(participantUsername);
                    minutes.text(Math.abs(inputValue));

                    $('#username-confirmation-input').on('input',
                        function () {
                            var value = $(this).val();
                            if (value === '@this.User.Identity.Name') {
                                submitFormButton.attr('disabled', false);
                            } else {
                                submitFormButton.attr('disabled', true);
                            }
                        });

                    confirmWindow.show();
                    changeTimeContainer.css('opacity', 0.3);

                    submitFormButton.click(
                        function () {
                            $('#change-time-for-active-participants>form').submit();
                        });

                    $('#cancel-btn-confirm-pop-up').click(
                        function () {
                            confirmWindow.hide();
                            changeTimeContainer.css('opacity', 1);
                        });
                });

            $('.change-time-method-checkbox').change(function () {
                $('div.change-time-method-container').hide();
                $('.change-time-method-checkbox').prop('checked', false);
                $(this).parents().first().children('div.change-time-method-container').show();
                $(this).prop('checked', true);
            });

            function setConfirmWindowHeader() {
                var confirmWindowHeader = $('#confirm-window-header');
                var headerPrefix = '@Resource.Confirmation_message_header_prefix ';
                var headerText = '';

                if ($('#change-time-by-interval').is(':visible')) {
                    headerText = '@Resource.Confirmation_message_header_change_by_interval';
                } else if ($('#change-time-by-user').is(':visible')) {
                    headerText = '@Resource.Confirmation_message_header_change_by_user';
                }

                var parser = new DOMParser;
                var header = parser.parseFromString(headerPrefix + headerText, 'text/html');

                confirmWindowHeader.html(header.body.textContent);
            }

            function changeAddSubractButton(value) {
                var addButton = $(addButtonSelector);
                var subtractButton = $(subtractButtonSelector);

                if (value >= 0) {
                    addButton.removeClass('hidden');
                    subtractButton.addClass('hidden');
                } else if (value < 0) {
                    addButton.addClass('hidden');
                    subtractButton.removeClass('hidden');
                }
            }
        }))
    </script>
}