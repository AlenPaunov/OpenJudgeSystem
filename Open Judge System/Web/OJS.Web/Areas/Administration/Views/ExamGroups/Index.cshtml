@using System.Collections

@using Resource = Resources.Areas.Administration.ExamGroups.Views.ExamGroupsIndex
@using GeneralResource = Resources.Areas.Administration.AdministrationGeneral

@{
    const string ControllerName = "ExamGroups";

    ViewBag.Title = Resource.Page_title;
}

@section Styles{
    @Styles.Render("~/Content/css/administration/administration-styles.css")
}

<div class="administration-container">
    <h1>@ViewBag.Title</h1>

    @(Html
        .Kendo()
        .Grid<OJS.Web.Areas.Administration.ViewModels.ExamGroups.ExamGroupAdministrationViewModel>()
        .Name("DataGrid")
        .Columns(columns =>
        {
            columns.Bound(m => m.Id).Hidden();
            columns.Bound(m => m.Name);
            columns.ForeignKey(m => m.ContestId, (IEnumerable)ViewBag.ContestIdData, "Id", "Name");
            columns.Bound(m => m.ExternalExamGroupId);
            columns.Bound(m => m.ExternalAppId);
            columns.Command(command => command.Edit().Text(" ").UpdateText(GeneralResource.Change).CancelText(GeneralResource.Cancel)).Width(80).Title(GeneralResource.Edit);
            columns.Command(command => command.Destroy().Text(" ")).Width(80).Title(GeneralResource.Delete);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create().Text(GeneralResource.Create);
            toolbar.Custom().Text(GeneralResource.Back_to_navigation).Action("Index", "Navigation", new { area = "Administration" }).Name("custom-toolbar-button");
        })
        .Editable(editable =>
        {
            editable.Mode(GridEditMode.PopUp);
            editable.Window(w =>w.Title(Resource.Page_title).Width(700));
            editable.DisplayDeleteConfirmation(GeneralResource.Delete_prompt);
        })
        .ColumnMenu()
        .ClientDetailTemplateId("enrolled-users-template")
        .Pageable(x => x.Refresh(true).PageSizes(true))
        .Sortable(x => x.Enabled(true).AllowUnsort(false))
        .Filterable(x => x.Enabled(true))
        .Resizable(x => x.Columns(true))
        .DataSource(data =>
        {
            data
                .Ajax()
                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(x => x.Id);
                })
                .Sort(sort => sort.Add(field => field.Id).Descending())
                .Create(read => read.Action("Create", "ExamGroups"))
                .Read(read => read.Action("Read", "ExamGroups"))
                .Update(update => update.Action("Update", ControllerName))
                .Destroy(destroy => destroy.Action("Destroy", ControllerName))
                .Events(ev => ev.Error("validateModelStateErrors"));
        })
        .Events(ev => ev.Edit("onEdit")))
</div>

<script type="text/x-kendo-template" id="enrolled-users-template">
    @(Html
          .Kendo()
          .Grid<OJS.Web.Areas.Administration.ViewModels.User.UserProfileSimpleAdministrationViewModel>()
          .Name("EnrolledUsersGrid_#=Id#")
          .Columns(columns =>
          {
              columns.Bound(m => m.Username);
              columns.Bound(m => m.FirstName);
              columns.Bound(m => m.LastName);
              columns.Bound(m => m.Email);
              columns.Command(command => command.Destroy().Text(" ")).Width(80).Title(GeneralResource.Remove);
          })
          .ToolBar(toolbar =>
          {
              toolbar.Create().Text(Resource.Add_user);
          })
          .Editable(editable =>
          {
              editable.Mode(GridEditMode.PopUp);
              editable.Window(w => w.Title(Resource.Add_user));
              editable.TemplateName("AddUserToExamGroup");
              editable.DisplayDeleteConfirmation(Resource.Remove_user_prompt);
          })
          .Pageable(x => x.Refresh(true))
          .Sortable(x => x.Enabled(true).AllowUnsort(false))
          .Filterable(x => x.Enabled(true))
          .DataSource(data =>
          {
              data
                  .Ajax()
                  .ServerOperation(true)
                  .Model(model => model.Id(m => m.UserId))
                  .Sort(sort => sort.Add(field => field.Username))
                  .Create(create => create.Action("AddUserToExamGroup", ControllerName, new { id = "#= Id #" }))
                  .Read(read => read.Action("UsersInExamGroup", ControllerName, new { id = "#= Id #" }))
                  .Destroy(destroy => destroy.Action("RemoveUserFromExamGroup", ControllerName, new { id = "#= Id #" }));
          })
          .ToClientTemplate())
</script>

<script type="text/javascript">
    function filterContests() {
        return {
            contestFilter: $('#ContestId').data("kendoComboBox").input.val()
        }
    }

    function filterUsers() {
        return {
            userFilter: $('#UserId').data("kendoComboBox").input.val()
        }
    }

    function onEdit() {
        $('.k-edit-form-container').css('width', '100%');
        $('.editor-label').css('width', '10%');
        $('.editor-field').css('width', '80%');

        var disabledFields = $('input:disabled').parent('.editor-field');

        $.each(disabledFields, function (i, field) {
            $(field).hide();
            $(field).prev().hide();
        });
    }
</script>